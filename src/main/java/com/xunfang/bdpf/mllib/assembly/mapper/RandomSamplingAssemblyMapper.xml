<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xunfang.bdpf.mllib.assembly.mapper.RandomSamplingAssemblyMapper">
  <resultMap id="BaseResultMap" type="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssembly">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="bdpf_mllib_assembly_id" jdbcType="VARCHAR" property="bdpfMllibAssemblyId" />
    <result column="sample_size" jdbcType="INTEGER" property="sampleSize" />
    <result column="sample_ratio" jdbcType="DOUBLE" property="sampleRatio" />
    <result column="sample_replace" jdbcType="INTEGER" property="sampleReplace" />
    <result column="random_seed" jdbcType="INTEGER" property="randomSeed" />
    <result column="core_num" jdbcType="INTEGER" property="coreNum" />
    <result column="mem_size_percore" jdbcType="INTEGER" property="memSizePercore" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, bdpf_mllib_assembly_id, sample_size, sample_ratio, sample_replace, random_seed, 
    core_num, mem_size_percore
  </sql>
  <select id="selectByExample" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssemblyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bdpf_mllib_assembly_random_sampling
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bdpf_mllib_assembly_random_sampling
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from bdpf_mllib_assembly_random_sampling
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssemblyExample">
    delete from bdpf_mllib_assembly_random_sampling
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssembly">
    insert into bdpf_mllib_assembly_random_sampling (id, bdpf_mllib_assembly_id, sample_size, 
      sample_ratio, sample_replace, random_seed, 
      core_num, mem_size_percore)
    values (#{id,jdbcType=VARCHAR}, #{bdpfMllibAssemblyId,jdbcType=VARCHAR}, #{sampleSize,jdbcType=INTEGER}, 
      #{sampleRatio,jdbcType=DOUBLE}, #{sampleReplace,jdbcType=INTEGER}, #{randomSeed,jdbcType=INTEGER}, 
      #{coreNum,jdbcType=INTEGER}, #{memSizePercore,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssembly">
    insert into bdpf_mllib_assembly_random_sampling
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bdpfMllibAssemblyId != null">
        bdpf_mllib_assembly_id,
      </if>
      <if test="sampleSize != null">
        sample_size,
      </if>
      <if test="sampleRatio != null">
        sample_ratio,
      </if>
      <if test="sampleReplace != null">
        sample_replace,
      </if>
      <if test="randomSeed != null">
        random_seed,
      </if>
      <if test="coreNum != null">
        core_num,
      </if>
      <if test="memSizePercore != null">
        mem_size_percore,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="bdpfMllibAssemblyId != null">
        #{bdpfMllibAssemblyId,jdbcType=VARCHAR},
      </if>
      <if test="sampleSize != null">
        #{sampleSize,jdbcType=INTEGER},
      </if>
      <if test="sampleRatio != null">
        #{sampleRatio,jdbcType=DOUBLE},
      </if>
      <if test="sampleReplace != null">
        #{sampleReplace,jdbcType=INTEGER},
      </if>
      <if test="randomSeed != null">
        #{randomSeed,jdbcType=INTEGER},
      </if>
      <if test="coreNum != null">
        #{coreNum,jdbcType=INTEGER},
      </if>
      <if test="memSizePercore != null">
        #{memSizePercore,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssemblyExample" resultType="java.lang.Long">
    select count(*) from bdpf_mllib_assembly_random_sampling
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bdpf_mllib_assembly_random_sampling
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.bdpfMllibAssemblyId != null">
        bdpf_mllib_assembly_id = #{record.bdpfMllibAssemblyId,jdbcType=VARCHAR},
      </if>
      <if test="record.sampleSize != null">
        sample_size = #{record.sampleSize,jdbcType=INTEGER},
      </if>
      <if test="record.sampleRatio != null">
        sample_ratio = #{record.sampleRatio,jdbcType=DOUBLE},
      </if>
      <if test="record.sampleReplace != null">
        sample_replace = #{record.sampleReplace,jdbcType=INTEGER},
      </if>
      <if test="record.randomSeed != null">
        random_seed = #{record.randomSeed,jdbcType=INTEGER},
      </if>
      <if test="record.coreNum != null">
        core_num = #{record.coreNum,jdbcType=INTEGER},
      </if>
      <if test="record.memSizePercore != null">
        mem_size_percore = #{record.memSizePercore,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bdpf_mllib_assembly_random_sampling
    set id = #{record.id,jdbcType=VARCHAR},
      bdpf_mllib_assembly_id = #{record.bdpfMllibAssemblyId,jdbcType=VARCHAR},
      sample_size = #{record.sampleSize,jdbcType=INTEGER},
      sample_ratio = #{record.sampleRatio,jdbcType=DOUBLE},
      sample_replace = #{record.sampleReplace,jdbcType=INTEGER},
      random_seed = #{record.randomSeed,jdbcType=INTEGER},
      core_num = #{record.coreNum,jdbcType=INTEGER},
      mem_size_percore = #{record.memSizePercore,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssembly">
    update bdpf_mllib_assembly_random_sampling
    <set>
      <if test="bdpfMllibAssemblyId != null">
        bdpf_mllib_assembly_id = #{bdpfMllibAssemblyId,jdbcType=VARCHAR},
      </if>
      <if test="sampleSize != null">
        sample_size = #{sampleSize,jdbcType=INTEGER},
      </if>
      <if test="sampleRatio != null">
        sample_ratio = #{sampleRatio,jdbcType=DOUBLE},
      </if>
      <if test="sampleReplace != null">
        sample_replace = #{sampleReplace,jdbcType=INTEGER},
      </if>
      <if test="randomSeed != null">
        random_seed = #{randomSeed,jdbcType=INTEGER},
      </if>
      <if test="coreNum != null">
        core_num = #{coreNum,jdbcType=INTEGER},
      </if>
      <if test="memSizePercore != null">
        mem_size_percore = #{memSizePercore,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xunfang.bdpf.mllib.assembly.entity.RandomSamplingAssembly">
    update bdpf_mllib_assembly_random_sampling
    set bdpf_mllib_assembly_id = #{bdpfMllibAssemblyId,jdbcType=VARCHAR},
      sample_size = #{sampleSize,jdbcType=INTEGER},
      sample_ratio = #{sampleRatio,jdbcType=DOUBLE},
      sample_replace = #{sampleReplace,jdbcType=INTEGER},
      random_seed = #{randomSeed,jdbcType=INTEGER},
      core_num = #{coreNum,jdbcType=INTEGER},
      mem_size_percore = #{memSizePercore,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>